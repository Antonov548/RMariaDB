// Generated by cpp11: do not edit by hand
// clang-format off

#include "RMariaDB_types.h"
#include <cpp11/R.hpp>
#include <Rcpp.h>
using namespace Rcpp;
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// result.cpp
cpp11::external_pointer<DbResult> result_create(cpp11::external_pointer<DbConnectionPtr> con, std::string sql, bool is_statement);
extern "C" SEXP _RMariaDB_result_create(SEXP con, SEXP sql, SEXP is_statement) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_create(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<DbConnectionPtr>>>(con), cpp11::as_cpp<cpp11::decay_t<std::string>>(sql), cpp11::as_cpp<cpp11::decay_t<bool>>(is_statement)));
  END_CPP11
}
// result.cpp
void result_release(cpp11::external_pointer<DbResult> res);
extern "C" SEXP _RMariaDB_result_release(SEXP res) {
  BEGIN_CPP11
    result_release(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<DbResult>>>(res));
    return R_NilValue;
  END_CPP11
}
// result.cpp
bool result_valid(cpp11::external_pointer<DbResult> res_);
extern "C" SEXP _RMariaDB_result_valid(SEXP res_) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_valid(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<DbResult>>>(res_)));
  END_CPP11
}
// result.cpp
cpp11::list result_fetch(DbResult* res, const int n);
extern "C" SEXP _RMariaDB_result_fetch(SEXP res, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_fetch(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res), cpp11::as_cpp<cpp11::decay_t<const int>>(n)));
  END_CPP11
}
// result.cpp
void result_bind(DbResult* res, cpp11::list params);
extern "C" SEXP _RMariaDB_result_bind(SEXP res, SEXP params) {
  BEGIN_CPP11
    result_bind(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(params));
    return R_NilValue;
  END_CPP11
}
// result.cpp
bool result_has_completed(DbResult* res);
extern "C" SEXP _RMariaDB_result_has_completed(SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_has_completed(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res)));
  END_CPP11
}
// result.cpp
int result_rows_fetched(DbResult* res);
extern "C" SEXP _RMariaDB_result_rows_fetched(SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_rows_fetched(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res)));
  END_CPP11
}
// result.cpp
int result_rows_affected(DbResult* res);
extern "C" SEXP _RMariaDB_result_rows_affected(SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_rows_affected(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res)));
  END_CPP11
}
// result.cpp
cpp11::list result_column_info(DbResult* res);
extern "C" SEXP _RMariaDB_result_column_info(SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(result_column_info(cpp11::as_cpp<cpp11::decay_t<DbResult*>>(res)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _RMariaDB_connection_begin_transaction(SEXP);
extern SEXP _RMariaDB_connection_commit(SEXP);
extern SEXP _RMariaDB_connection_create(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _RMariaDB_connection_info(SEXP);
extern SEXP _RMariaDB_connection_is_transacting(SEXP);
extern SEXP _RMariaDB_connection_quote_string(SEXP, SEXP);
extern SEXP _RMariaDB_connection_release(SEXP);
extern SEXP _RMariaDB_connection_rollback(SEXP);
extern SEXP _RMariaDB_connection_valid(SEXP);
extern SEXP _RMariaDB_driver_done();
extern SEXP _RMariaDB_driver_init();
extern SEXP _RMariaDB_init_logging(SEXP);
extern SEXP _RMariaDB_version();

static const R_CallMethodDef CallEntries[] = {
    {"_RMariaDB_connection_begin_transaction", (DL_FUNC) &_RMariaDB_connection_begin_transaction,  1},
    {"_RMariaDB_connection_commit",            (DL_FUNC) &_RMariaDB_connection_commit,             1},
    {"_RMariaDB_connection_create",            (DL_FUNC) &_RMariaDB_connection_create,            16},
    {"_RMariaDB_connection_info",              (DL_FUNC) &_RMariaDB_connection_info,               1},
    {"_RMariaDB_connection_is_transacting",    (DL_FUNC) &_RMariaDB_connection_is_transacting,     1},
    {"_RMariaDB_connection_quote_string",      (DL_FUNC) &_RMariaDB_connection_quote_string,       2},
    {"_RMariaDB_connection_release",           (DL_FUNC) &_RMariaDB_connection_release,            1},
    {"_RMariaDB_connection_rollback",          (DL_FUNC) &_RMariaDB_connection_rollback,           1},
    {"_RMariaDB_connection_valid",             (DL_FUNC) &_RMariaDB_connection_valid,              1},
    {"_RMariaDB_driver_done",                  (DL_FUNC) &_RMariaDB_driver_done,                   0},
    {"_RMariaDB_driver_init",                  (DL_FUNC) &_RMariaDB_driver_init,                   0},
    {"_RMariaDB_init_logging",                 (DL_FUNC) &_RMariaDB_init_logging,                  1},
    {"_RMariaDB_result_bind",                  (DL_FUNC) &_RMariaDB_result_bind,                   2},
    {"_RMariaDB_result_column_info",           (DL_FUNC) &_RMariaDB_result_column_info,            1},
    {"_RMariaDB_result_create",                (DL_FUNC) &_RMariaDB_result_create,                 3},
    {"_RMariaDB_result_fetch",                 (DL_FUNC) &_RMariaDB_result_fetch,                  2},
    {"_RMariaDB_result_has_completed",         (DL_FUNC) &_RMariaDB_result_has_completed,          1},
    {"_RMariaDB_result_release",               (DL_FUNC) &_RMariaDB_result_release,                1},
    {"_RMariaDB_result_rows_affected",         (DL_FUNC) &_RMariaDB_result_rows_affected,          1},
    {"_RMariaDB_result_rows_fetched",          (DL_FUNC) &_RMariaDB_result_rows_fetched,           1},
    {"_RMariaDB_result_valid",                 (DL_FUNC) &_RMariaDB_result_valid,                  1},
    {"_RMariaDB_version",                      (DL_FUNC) &_RMariaDB_version,                       0},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_RMariaDB(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
